{"version":3,"file":"monolog.js","sourceRoot":"","sources":["../src/monolog.ts"],"names":[],"mappings":";;AAEA,2CAAqD;AAErD,IAAM,MAAM,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAA;AAG9C;;;;;;;;;GASG;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AAGH,IAAI,aAAsB,CAAA;AAG1B,MAAM,CAAC,OAAO,CAAC,YAAU,6BAAoB,CAAC,QAAU,EAAE,UAAC,GAAG,EAAE,IAAI;IAEhE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACN,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAE,GAAG,CAAC,CAAA;QACrD,MAAM,CAAA;IACV,CAAC;IAED,IAAI,CAAC,aAAa,CAAC,UAAC,GAAG,EAAE,EAAE;QAEvB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,+BAA+B,EAAE,GAAG,CAAC,CAAA;YACjD,MAAM,CAAA;QACV,CAAC;QAED,aAAa,GAAG,EAAE,CAAA;IACtB,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAA;AAGF;IAAA;IA6BA,CAAC;IA1BiB,oBAAY,GAA1B;QAEI,MAAM,CAAC,IAAI,OAAO,CAAA;IACtB,CAAC;IAGD,qBAAG,GAAH,UAAI,OAAY;QAEZ,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YAEjB,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAA;QACxE,CAAC;QAED,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;YAE9B,OAAO,CAAC,MAAM,GAAG,QAAQ,CAAA;YAEzB,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAA;QACrC,CAAC;QAED,IAAM,CAAC,GAAG,SAAS,CAAA;QAEnB,aAAa,CAAC,WAAW,CAAC,CAAC,EAAE,EAAC,OAAO,EAAE,KAAK,EAAC,CAAC,CAAA;QAE9C,aAAa,CAAC,WAAW,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAA;IACtD,CAAC;IACL,cAAC;AAAD,CAAC,AA7BD,IA6BC;AA7BY,0BAAO","sourcesContent":["import {sendPushNotification} from './send_push_notifications'\nimport {Channel} from 'amqplib/callback_api'\nimport {DockerServiceAddress} from '@stellium/common'\n\nconst amqlib = require('amqplib/callback_api')\n\n\n/**\n * config Object\n * {\n *     file_path: String;\n *     line_number: Number(__line);\n *     error: Mixed;\n *     message: String;\n *     severity: Enum('sever', 'moderate', 'light')\n * }\n */\n/*\n export const MonologX = (config: MonologSchema, callback?: Function) => {\n\n return {\n\n createClient: () => {\n\n amqlib.connect(`amqp://${containerized() ? 'rabbit' : 'localhost'}`, (err, conn) => {\n\n })\n }\n }\n\n // Set default severity value\n config.severity = config.severity || 'severe'\n\n // Save to database in production\n MonologModel.create(config, (err, monologEntry) => {\n\n if (config.severity === 'severe') {\n // Send notification to all Stellium developers on severe\n // notification that requires immediate attention\n sendPushNotification(config.message, monologEntry._id)\n }\n\n // Trigger callback if provided\n if (callback && typeof callback === 'function') callback(err, monologEntry)\n })\n }\n */\n\n\nlet rabbitChannel: Channel\n\n\namqlib.connect(`amqp://${DockerServiceAddress.RabbitMQ}`, (err, conn) => {\n\n    if (err) {\n        console.log('error connecting to rabbit server', err)\n        return\n    }\n\n    conn.createChannel((err, ch) => {\n\n        if (err) {\n            console.log('error creating rabbit channel', err)\n            return\n        }\n\n        rabbitChannel = ch\n    })\n})\n\n\nexport class Monolog {\n\n\n    public static createClient(): Monolog {\n\n        return new Monolog\n    }\n\n\n    log(message: any): void {\n\n        if (!rabbitChannel) {\n\n            throw new Error('The RabbitMQ Channel has not been initialised yet')\n        }\n\n        if (typeof message === 'object') {\n\n            message.module = ModuleID\n\n            message = JSON.stringify(message)\n        }\n\n        const q = 'monolog'\n\n        rabbitChannel.assertQueue(q, {durable: false})\n\n        rabbitChannel.sendToQueue(q, Buffer.from(message))\n    }\n}\n"]}