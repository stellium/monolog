{"version":3,"file":"monolog.js","sourceRoot":"","sources":["../src/monolog.ts"],"names":[],"mappings":";;AAAA,kBAAe;AACf,6CAA8C;AAK9C,IAAM,MAAM,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAA;AAG9C,IAAM,aAAa,GAAG,UAAC,MAAqB;IAExC,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,IAAI,QAAQ,CAAA;IAE1C,IAAI,KAAK,GAAG,KAAK,CAAA;IAEjB,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QAEf,KAAK,UAAU;YACX,KAAK,GAAG,QAAQ,CAAA;YAChB,KAAK,CAAA;QACT,KAAK,OAAO;YACR,KAAK,GAAG,OAAO,CAAA;YACf,KAAK,CAAA;QACT,KAAK,QAAQ;YACT,KAAK,GAAG,MAAM,CAAA;YACd,KAAK,CAAA;IACb,CAAC;IAED,MAAM,CAAC,KAAK,CAAA;AAChB,CAAC,CAAA;AAGD,IAAI,QAAQ,GAAG,EAAE,CAAA;AAEjB,IAAM,kBAAkB,GAAG,UAAC,MAAM;IAE9B,IAAI,MAAM,GAAG,EAAE,CAAA;IAEf,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,MAAM,EAAE,CAAC,EAAE;QAAE,MAAM,IAAI,GAAG,CAAA;IAEzD,MAAM,CAAC,MAAM,CAAA;AACjB,CAAC,CAAA;AAGD,IAAM,eAAe,GAAG,UAAC,OAAe;IAEpC,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,IAAI,QAAQ,CAAC;QAAC,MAAM,CAAC,OAAK,OAAO,GAAG,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,OAAI,CAAA;IAE5F,IAAI;QAAC,MAAM,CAAC,OAAK,OAAO,OAAI,CAAA;AAChC,CAAC,CAAA;AAGD;;;;;;;;;GASG;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BE;AAGF,IAAI,aAAsB,CAAA;AAG1B,MAAM,CAAC,OAAO,CAAC,aAAU,aAAa,EAAE,GAAG,QAAQ,GAAG,WAAW,CAAE,EAAE,UAAC,GAAG,EAAE,IAAI;IAE3E,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACN,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAE,GAAG,CAAC,CAAA;QACrD,MAAM,CAAA;IACV,CAAC;IAED,IAAI,CAAC,aAAa,CAAC,UAAC,GAAG,EAAE,EAAE;QAEvB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,+BAA+B,EAAE,GAAG,CAAC,CAAA;YACjD,MAAM,CAAA;QACV,CAAC;QAED,aAAa,GAAG,EAAE,CAAA;IACtB,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAA;AAGF;IAAA;IAyBA,CAAC;IAtBiB,oBAAY,GAA1B;QAEI,MAAM,CAAC,IAAI,OAAO,CAAA;IACtB,CAAC;IAGD,qBAAG,GAAH,UAAI,OAAY;QAEZ,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAA;QAClE,CAAC;QAED,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC9B,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAA;QACrC,CAAC;QAED,IAAM,CAAC,GAAG,SAAS,CAAA;QAEnB,aAAa,CAAC,WAAW,CAAC,CAAC,EAAE,EAAC,OAAO,EAAE,KAAK,EAAC,CAAC,CAAA;QAE9C,aAAa,CAAC,WAAW,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAA;IACtD,CAAC;IACL,cAAC;AAAD,CAAC,AAzBD,IAyBC;AAzBY,0BAAO","sourcesContent":["import 'colors'\nimport * as containerized from 'containerized'\nimport {sendPushNotification} from './send_push_notifications'\nimport {MonologSchema} from './interface'\nimport {Channel} from 'amqplib/callback_api'\n\nconst amqlib = require('amqplib/callback_api')\n\n\nconst getErrorColor = (config: MonologSchema): string => {\n\n    let severity = config.severity || 'severe'\n\n    let color = 'red'\n\n    switch (severity) {\n\n        case 'moderate':\n            color = 'yellow'\n            break\n        case 'light':\n            color = 'green'\n            break\n        case 'ignore':\n            color = 'blue'\n            break\n    }\n\n    return color\n}\n\n\nlet strLimit = 80\n\nconst fillRemainingSpace = (length) => {\n\n    let spaces = ''\n\n    for (let i = 0; i < strLimit - length; i++) spaces += ' '\n\n    return spaces\n}\n\n\nconst truncateMessage = (message: string): string => {\n\n    if (message.length <= strLimit) return `| ${message}${fillRemainingSpace(message.length)} |`\n\n    else return `| ${message} |`\n}\n\n\n/**\n * config Object\n * {\n *     file_path: String;\n *     line_number: Number(__line);\n *     error: Mixed;\n *     message: String;\n *     severity: Enum('sever', 'moderate', 'light')\n * }\n */\n/*\nexport const MonologX = (config: MonologSchema, callback?: Function) => {\n\n    return {\n\n        createClient: () => {\n\n            amqlib.connect(`amqp://${containerized() ? 'rabbit' : 'localhost'}`, (err, conn) => {\n\n            })\n        }\n    }\n\n    // Set default severity value\n    config.severity = config.severity || 'severe'\n\n    // Save to database in production\n    MonologModel.create(config, (err, monologEntry) => {\n\n        if (config.severity === 'severe') {\n            // Send notification to all Stellium developers on severe\n            // notification that requires immediate attention\n            sendPushNotification(config.message, monologEntry._id)\n        }\n\n        // Trigger callback if provided\n        if (callback && typeof callback === 'function') callback(err, monologEntry)\n    })\n}\n*/\n\n\nlet rabbitChannel: Channel\n\n\namqlib.connect(`amqp://${containerized() ? 'rabbit' : 'localhost'}`, (err, conn) => {\n\n    if (err) {\n        console.log('error connecting to rabbit server', err)\n        return\n    }\n\n    conn.createChannel((err, ch) => {\n\n        if (err) {\n            console.log('error creating rabbit channel', err)\n            return\n        }\n\n        rabbitChannel = ch\n    })\n})\n\n\nexport class Monolog {\n\n\n    public static createClient(): Monolog {\n\n        return new Monolog\n    }\n\n\n    log(message: any): void {\n\n        if (!rabbitChannel) {\n            throw new Error('Rabbit Channel has not been initialised yet')\n        }\n\n        if (typeof message === 'object') {\n            message = JSON.stringify(message)\n        }\n\n        const q = 'monolog'\n\n        rabbitChannel.assertQueue(q, {durable: false})\n\n        rabbitChannel.sendToQueue(q, Buffer.from(message))\n    }\n}\n"]}